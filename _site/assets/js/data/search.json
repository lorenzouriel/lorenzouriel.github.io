[
  
  {
    "title": "O Básico para Iniciar no Git",
    "url": "/posts/git-basic/",
    "categories": "Git & GitHub",
    "tags": "git",
    "date": "2024-05-28 00:00:00 -0300",
    





    
    "snippet": "O Básico para Iniciar no Git &amp; GitHubA ideia desse artigo é te introduzir no mundo do Git, você vai aprender os principais comandos, como iniciar com um repositório no GitHub e sobre Markdown p...",
    "content": "O Básico para Iniciar no Git &amp; GitHubA ideia desse artigo é te introduzir no mundo do Git, você vai aprender os principais comandos, como iniciar com um repositório no GitHub e sobre Markdown para começar as suas documentações.Tópicos  Aprendendo Git          Principais Comandos      Repositórios      Markdown        O que é Versionamento e Tags?Aprendendo GITO Git é um sistema de controle de versão, projetado para rastrear alterações em projetos de software e coordenar o trabalho de várias pessoas neles.Desenvolvido por Linus Torvalds em 2005, o Git se destaca por sua eficiência, flexibilidade e capacidade de lidar com projetos de qualquer tamanho.Ele registra as alterações no código-fonte, permite que várias ramificações de desenvolvimento existam simultaneamente e facilita a fusão de código de diferentes colaboradores.Principais ComandosCommitAcontece quando queremos salvar as última atualizações que foram realizadas.Processos relacionados ao Commit:  Verificar o status dos arquivos modificados:    git status        Adicionar os arquivos para o commit:```shgit add arquivo1.txt arquivo2.jsgit add . # Adiciona todos- Realizar o commit:```shgit commit -m \"Primeiro Commit\"O -m é utilizado para adicionarmos uma mensagem no commit, em seguida temos o texto \"Primeiro Commit\".PushAcontece quando enviamos as alterações para o repositório - “empurra” as modificações para o repositório remotoProcessos relacionados ao Push:  Realizar o push para o repositório remoto:```shgit pushougit push origin nome-da-branch- Se for a primeira conexão e primeiro push: ```shgit push -u origin nome-da-branchÉ necessário configurar a relação entre as branches locais e remotas usando o comando acima.O -u estabelece uma relação de acompanhamento, facilitando futuros pushes e pulls.PullAtualiza o seu repositório local com as alterções no repositório remoto - “puxa” as alterações do repositório remoto.Ele traz todas as alterações do seu repositório remoto para o local.Processos relacionados ao Pull:  Realizar o pull para obter as alterações mais recentes:    git pull origin nome-da-branch        Se você já configurou a relação de acompanhamento durante o git push -u, pode usar apenas:    git pull      TagUma tag no Git é uma referência específica a um ponto na história do seu repositório. É comumente usado para marcar versões estáveis ou importantes do seu projeto.As tags são úteis para criar pontos de referência fixos que não se movem à medida que novos commits são feitos.Processos relacionados ao Tag:  Listar as tags existentes:    git tag        Criar uma nova tag:    git tag -a v1.0 -m \"Versão 1.0\"        Este comando cria uma tag anotada chamada \"v1.0\" com uma mensagem descritiva \"Versão 1.0\".          1. a: Cria uma tag anotada.      2. v1.0: Nome da tag.      3. -m “Versão 1.0”: Mensagem descritiva associada à tag.        Compartilhar a tag no repositório remoto:    git push origin v1.0      RepositóriosO repositório é o local onde o projeto fica armazenado. Temos os repositórios locais e remotos:  Remoto - GitHub, outro CVS ou Servidor  Local - Própria MáquinaNo repositório temos os branchs (Ramos) originais do projeto que chamamos de main, podemos também criar novos branchs para desenvolver as alterações.Exemplo: Crie um branch chamado dev-task-13, nesse branch você vai focar em finalizar a task 13 do seu backlog, quando finalizar você commita e faz um merge com a branch principal. Assim, você não afeta o seu branch principal com alterações que podem quebrar o código.Quando trabalhamos com repositórios remotos, temos que citar as Issues - no contexto do Git, uma “issue” refere-se a uma maneira de rastrear tarefas, melhorias, erros (bugs) ou discussões relacionadas a um projeto específico.Chamamos de Working Tree, o local onde os arquivos estão realmente armazenados. E temos o index (índice) que é local onde o Git armazena o que será commitado, entre a Working Tree e o Repositório Git.Arquitetura Git e Comandos:  Criando um Repo Local e Remoto:1. Vá até o seu GitHub e crie um novo repositório:  2. Navegue até o diretório local onde deseja criar o repositório — use o comando cd para entrar no diretório desejado.cd c:\\path\\vagrant3. Este comando cria um arquivo chamado README.md e insere o texto #up-website-with-vagrant nele. O » é um operador de redirecionamento que acrescenta o texto ao final do arquivo, ou cria o arquivo se ele não existir.echo \"# up-website-with-vagrant\" &gt;&gt; README.md4. Inicializa um novo repositório Git no diretório atual.git init5. Adiciona o arquivo README.md ao índice. Isso prepara o arquivo para ser incluído no próximo commit.git add README.md6. Adiciona todas as alterações (Se houver)git add .7. Cria o primeiro commit no repositório com uma mensagem. O -m permite adicionar a mensagem de commit diretamente na linha de comando.git commit -m \"first commit\"8. Renomeia a branch padrão do repositório para main. Este comando é usado para atualizar o nome da branch principal para seguir as práticas mais recentes em relação ao uso de nomes, substituindo a antiga mastergit branch -M main9. Adiciona um repositório remoto chamado “origin”. O termo “origin” é um padrão utilizado para referenciar o repositório remoto principal. O URL é o endereço do repositório no GitHub.git remote add origin https://github.com/lorenzouriel/up-website-with-vagrant.git10. Envia o repositório local para o repositório remoto (“origin”) na branch principal (main). O -u estabelece uma relação de acompanhamento, associando automaticamente a branch local com a branch remota. Isso é útil para futuros git pull  e git push sem a necessidade de especificar a branch.git push -u origin mainPodemos verificar o nosso repositório remoto:  MarkdownNo contexto do Git, o Markdown é usado para criar arquivos de documentação, como README.md. Sempre atualize o seu README.md!Breve resumo sobre Markdown  Cabeçalhos:```md    Meu Projeto  DescriçãoUma breve descrição do meu incrível projeto.- Listas:```md### Funcionalidades- Funcionalidade 1- Funcionalidade 2- Funcionalidade 3  Links:    [Link para o meu site](https://www.exemplo.com)        Imagens:    ![Logo do Projeto](imagens/logo.png)        Ênfase (negrito e itálico):    Este é um **projeto incrível** que usa _tecnologias modernas_.        Citações:    &gt; \"Beba água.\" - Ivysson        Tabelas:    | Nome       | Função           ||------------|------------------|| João       | Desenvolvedor    || Maria      | Designer         |        Código:                O que é Versionamento e Tags?Já trabalhou com lançamento de versões?Ou com Tags no Git?As tags são bem importantes em nossos projetos - com elas conseguimos identificar em qual momento no tempo ocorreram os principais lançamentos e versões.É um meio de organizar e documentar o seu trabalho.Mas quando você for adicionar as tags, vai saber a diferença de cada número?Vou te explicar a diferença de forma simples e prática:  Major: São alterações incompatíveis com as versões anteriores (Reestruturou tudo? Adicione +1 - v2.0.0)  Minor: São alterações importantes e compativéis com a versão anterior (Adicionou uma nova funcionalidade? Adicione +1 v2.1.0)  Correção: Erros e bugs que não afetam a versão (Encontrou um bug e corrigiu? Adicione +1 v2.1.1)  Build: É um controle interno do Git e do versionamento, ele não fica necessariamente à vista quando você especifica a versão.Exemplo:  "
  },
  
  {
    "title": "Monitoria e Observabilidade com Prometheus e Grafana",
    "url": "/posts/observability-prometheus-grafana/",
    "categories": "Observability",
    "tags": "observability, IaC",
    "date": "2024-05-22 00:00:00 -0300",
    





    
    "snippet": "PrometheusÉ uma ferramenta de monitoria, muito utilizado em ambientes dinâmicos, como containers (k8s, swarms, e etc…)Pode ser utilizado em outros ambientes bare metal, mas o forte dele é em infrae...",
    "content": "PrometheusÉ uma ferramenta de monitoria, muito utilizado em ambientes dinâmicos, como containers (k8s, swarms, e etc…)Pode ser utilizado em outros ambientes bare metal, mas o forte dele é em infraestrutura de microserviços e containers.Você utilizar ele de diversas maneiras:  Como um http server que salva e expõe as métricas, assim você pode consultar usando outro sistema de observabilidade.  Como um sistema de observabilidade completo, criando dashboards e gerando alertas em cima dessas métricasArquitetura PrometheusUm outro ponto importante é que o Prometheus faz o pull das métricas, diferente de outras aplicações de monitoria, realizando esse pull, deixa o processo mais leve e menos danoso para o servidor/ambiente monitorado.  Alguns aspectos importantes são:  Targets: Qualquer ambiente que podemos recolher as métricas, como: linux server, http server, databases, containers, microserviços e qualquer ambiente.  Units: Qualquer medida que podemos analisar do ambiente: CPU, memória, latência, espaço em disco, etc…  Metrics: Todas as units que foram recolhidas e armazenadas no Prometheus.O Retrieval é o agente que envia essas métricas, ele recolhe essas informações atráves de uma URL de conexão com seu ambiente. Para isso vamos precisar de um library que expõe a sua aplicação com o recurso /metrics  Alguns serviços já possuem esse /metrics expostos.Arquitetura Prometheus Simplificada    Fonte: https://michelleamesquita.medium.com/monitoramento-com-grafana-prometheus-fc2227e67433O nosso Prometheus utiliza o retrieval para realizar o pull das métricas de nossos ambientes e adiciona essas métricas em um Storage (Time Series Database). Com o Grafana nós conseguimos consultar essas métricas e criar dashboards personalizados de monitoria e observabilidade.Podemos também usar a própria UI do Prometheus ou consultar via API.GrafanaÉ uma ferramenta Open Source para visualização de dados, ela é muito popular para visualização de monitoria e observabilidade.Você pode criar alertas, queries e diversas visualizações consultando as /metrics.Existem vários dashboards já pré-configurados que foram disponibilizados pela comunidade, vamos utilizar um deles:      Nós vamos utilizar os dashboard do repositório Grafana Dashboards, segue link do GitHub: acesse aqui        Podemos importar um dashboard para o grafana usando usando o tema.json do repositório acima: acesse aqui  O que é o Node Exporter?  O Node Exporter é um componente do ecossistema de monitoramento do Prometheus, utilizado para coletar e expor métricas sobre o hardware e o sistema operacional de um nó (servidor) em um formato que pode ser lido pelo Prometheus. Ele é especialmente útil para obter informações detalhadas sobre o desempenho e o estado dos recursos do sistema, como CPU, memória, disco, rede, entre outros.Subindo um Serviço de Observabilidade e Monitoria com Prometheus e GrafanaEu adicionei todos os arquivos que utilizei em um repositório no meu GitHub. Você pode clonar e iniciar com os comandos abaixo.Resumo dos Arquivos:  Vagrantfile: Configuração para criar e provisionar a VM com Vagrant.  provision.sh: Script de provisionamento para instalar e configurar Docker na VM.  prometheus.yml: Arquivo de configuração do Prometheus para definir as fontes de scrape.  node_exporter-1.3.0.linux-amd64.tar.gz: Binário do Node Exporter para monitorar a máquina.Subindo a VMPara iniciar a VM, use o comando:vagrant upAcessando a VMSincronize e adicione os arquivos na pasta do servidor:vagrant rsyncConfiguração do Node Exporter  Extraia os arquivos do tar:    tar -xvf node_exporter-1.3.0.linux-amd64.tar.gz        Mova os arquivos para o diretório /opt/:    tar -xvf node_exporter-1.3.0.linux-amd64.tar.gz        Navegue para a pasta do node_exporter:    cd /opt/node_exporter-1.3.0.linux-amd64        Execute o node exporter em background (para não travar o cmd):    nohup ./node_exporter &amp;        Verifique os logs do nohup:    tail -f nohup.out`      Testando a Conexão do Node Exporter (Opcional)Para instalar telnet, se necessário, e testar a conexão do node exporter:yum install telnet -ytelnet 192.168.1.6 9100Configuração do PrometheusSuba o Prometheus via Docker:docker run -d -p 9090:9090 -v /vagrant/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheusAcessando as Interfaces  Acesse a UI do Prometheus em: http://192.168.1.6:9090  Acesse o node exporter em: http://192.168.1.6:9100/metricsConfiguração do Grafana  Suba a imagem do Grafana:    docker run -d -p 3000:3000 --name grafana grafana/grafana:latest        Verifique se o Docker e o Prometheus estão no ar:    docker ps        Acesse a interface do Grafana:          URL: http://192.168.1.3:3000      Login padrão: admin      Senha padrão: admin        Configure a fonte de dados no Grafana:          Vá em Data Sources -&gt; Add data source -&gt; Prometheus      Em Connection -&gt; URL, adicione: http://192.168.1.6:9090      Clique em Save &amp; Test        Importando um Dashboard pré-configurado para o Node Exporter:          Acesse os dashboard nesse [repositório] e o .json que utilizei [aqui].      Copie o conteúdo do arquivo .json do dashboard.      No Grafana, vá em Dashboards -&gt;  Create Dashboard -&gt; Import.      Cole o conteúdo do .json no campo Import.      Selecione a fonte de dados Prometheus configurada anteriormente.      Clique em Import.        Seu Dashboard estará disponível e configurado.                "
  },
  
  {
    "title": "Vagrant Descomplicado: Um Guia Prático",
    "url": "/posts/basic-start-vagrant/",
    "categories": "IaC",
    "tags": "IaC",
    "date": "2024-05-20 00:00:00 -0300",
    





    
    "snippet": "Vagrant Descomplicado: Um Guia PráticoA minha ideia é te ensinar a usar as principais funcionalidades do Vagrant em apenas um artigo, de forma simplificada e rápida. Você vai aprender o que é, para...",
    "content": "Vagrant Descomplicado: Um Guia PráticoA minha ideia é te ensinar a usar as principais funcionalidades do Vagrant em apenas um artigo, de forma simplificada e rápida. Você vai aprender o que é, para que serve, quais as suas funcionalidades e vai subir uma VM comigo no decorrer do artigo!Tópicos  Introdução          O que é IaC?      O que é um Hypervisor?      O que é uma VM?      O que é o Vagrant?        Instalando o Ambiente  Iniciando com uma Box  Gerenciando uma Box          Criando um VagrantFile      Comandos para Manipular uma VM      Configurando Redes, Hostname e Liberando Porta na VM      Scripts Shell para Automatizar Tarefas        Criando uma BOXIntroduçãoO que é IaC?IaC, ou Infraestrutura como Código, é uma abordagem na qual a infraestrutura de TI é gerenciada e provisionada usando código, em vez de configurações manuais. Sendo assim, facilita a automação e gestão ágil dos ambientes, chega de “na minha máquina funciona”.O que é um Hypervisor?Um hypervisor é um software ou firmware que permite a execução de máquinas virtuais (VMs) em um único hardware físico. Ele age como uma camada de virtualização entre o hardware físico do computador e os sistemas operacionais convidados, permitindo que vários sistemas operacionais compartilhem o mesmo hardware simultaneamente. Nós iremos utilizar VirtualBox para subir as nossas VMs com o Vagrant.O que é uma VM (Virtual Machine)?É um software que simula um ambiente de computador físico e permite a execução de sistemas operacionais e aplicativos como se estivessem em hardware físico real.O que é o Vagrant?É uma ferramenta de linha de comando utilizada para agilizar todo o WorkFlow de uma VM, também, controlar todo o LifeCycle da VM. Nós manipulamos um Hypervisor por meio de comandos Vagrant, ele traduz os comandos enviados para os comandos do Hypervisor utilizado. O Vagrant abstrai detalhes específicos do hypervisor, proporcionando uma abordagem consistente e portátil para configuração de ambientes. O uso de arquivos de configuração (Vagrantfiles) permite uma configuração fácil e rápida de ambientes.Imagina que você subiu um ambiente de Dev com tudo, quer adicionar esse ambiente em um outro servidor ou enviar para uma pessoa? Compartilhe o VagrantFile.Instalando o AmbienteVocê precisa apenas fazer o download e instalar. Depois, podemos avançar para os próximos tópicos.  Hypervisor que utilizo: VirtualBox  VagrantIniciando com uma BoxUma Box é basicamente o sistema operacional que você vai virtualizar. Ou seja, uma Box é uma VM empacotada em um arquivo chamado Box. O Vagrant tem uma comunidade onde as pessoas compartilham as suas Boxes, chamada Vagrant Cloud. Mas você também pode criar uma Box própria.Imagine que no seu ambiente você utiliza o SQL Server, Power BI e outras ferramentas. Com o Vagrant, você poderia baixar uma Box com apenas o sistema operacional Windows, instalar o que você precisa e, depois, fechar uma Box sua. Assim, você iria compartilhar uma Box pronta para os ambientes ou compartilhar com a comunidade!  Vagrant CloudComandos:Vamos imaginar que você quer baixar o Box do windows no seu servidorvagrant box add gusztavvargadr/windows-server-2019-standardBaixou algumas Boxes? Vamos lista-lasvagrant box listListar opções de comando do vagrant box (Você pode usar o -h para todos os comandos)vagrant box -h (Geral)vagrant box list -h  (Específico)Quer verificar se existe alguma Box desatualizada no seu servidor?vagrant box outdated (No próprio diretório)vagrant box outdated -- global (Vai verificar todas que tenho no servidor)Quer remover a que está desatualizada?vagrant box prune (Vai remover todas as desatualizadas)Ou… atualizar as mesmas sem danificar?vagrant box updateCaso você queira remover apenas uma Box específica.vagrant box remove vm/nameEsses são os comandos principais para você utilizar e baixar uma Box, vou deixar o meu cmd como exemplo:  Gerenciando uma BoxO VagrantFile é a magia do Vagrant, do que adianta ter uma VM se você não consegue manipular a mesma? Bom, isso acabou…O VagrantFIle é o local em que adicionaremos/modificaremos todas as configurações necessárias para subir a nossa VM. Você pode configurar opções de rede, hardware e até mesmo Shell Scripts para automatizar instalações.Criando um VagrantFileEssa é a etapa que interessa, é aqui que vamos iniciar a primeira etapa com o Vagrant.Comandos:Para criar um VagrantFile, utilize o comando no seu repositório:vagrant init vm/nameEle vai verificar se a Box já foi instalada (Instalamos com o vagrant box add) Se ela não estiver sido instalada, ele irá instalar.  Esse é um exemplo do VagrantFile criado (Ele vem cheio de comentários, eu removi e deixei só o que importa nesse primeiro momento):Vagrant.configure(\"2\") do |config|  config.vm.box = \"peru/windows-server-2019-standard-x64-eval\" # Box utilizada   config.vm.provider \"virtualbox\" do |vb| # Hypervisor utilizado       vb.memory = \"1024\" # Memória disponibilizada      vb.cpus = 10  # Configuração de CPUs      vb.name = \"Article Test 01\" # Nome da VM no Hypervisor  endendPronta para subir a mesma? Só rodar o seguinte comando no diretório:vagrant upE aguardar…  Mas em poucos instantes, sua VM está no ar!  Comandos para Manipular uma VMVou listar alguns dos comandos principais que você precisa saber para manipular a sua VM no ar.Comandos:Verificar o Status da VMvagrant statusDesligar a VMvagrant haltSubir a VM (Se existir - Liga/Se não - Cria)vagrant upSuspende a VMvagrant suspendReiniciar a VMvagrant reloadDestruir ou Remover a VMvagrant destroy (y/n?)Configurando Redes, Hostname e Liberando Porta na VMPara configurar as redes, nós temos duas opções: NAT ou BRIDGE.      NAT - É uma tecnologia usada para compartilhar uma conexão de internet com vários dispositivos em uma rede local. O roteador recebe um endereço IP público da internet e atribui um endereço privado a cada dispositivo na rede local. Assim, o roteador traduz os endereços IPs privados para os público, permitindo que dispositivos na rede acessem a internet.        BRIDGE - É uma tecnologia utilizada para conectar duas ou mais redes locais em uma única rede. Uma ponte (Bridge) é um dispositivo que conecta duas redes e permite que os dispositivos em uma rede se conectem aos dispositivos de outra rede, como se estivessem na mesma rede.  No meu exemplo, eu vou escolher o NAT.Exemplos:Conexão NAT - DHCP.Vagrant.configure(\"2\") do |config|   config.vm.network \"private_network\", type: \"dhcp\"   config.vm.box = \"peru/windows-server-2019-standard-x64-eval\" # Box utilizadaendConexão NAT - IP FixoVagrant.configure(\"2\") do |config|     config.vm.network \"private_network\", ip: \"192.168.25.10\"     config.vm.box = \"peru/windows-server-2019-standard-x64-eval\" # Box utilizadaendApós definirmos o tipo da rede, podemos fornecer um exemplo de porta.Suponha que a máquina virtual (VM) que você está iniciando seja responsável por um servidor SQL, e que seja necessário estabelecer uma conexão com o SQL Server. Para realizar isso, é necessário liberar a porta associada ao SQL Server - por padrão é a 1433.Vagrant.configure(\"2\") do |config|   config.vm.network \"forwarded_port\", guest: 1433, host: 1433    config.vm.box = \"peru/windows-server-2019-standard-x64-eval\" # Box utilizada end      guest: 1433: Especifica que a porta no ambiente da máquina virtual (o “convidado”) é a 1433.        host: 1433: Indica que a porta no ambiente do host (a máquina física que está executando a VM) é também 1433.  O Hostname é a última etapa que quero abordar neste capítulo, com ele vamos especificar um nome para a conexão em nossa rede local. Por exemplo, nós criamos a nossa rede em NAT, para conectar na máquina remotamente, precisaremos nos conectar pelo IP. O problema disso é: nosso IP não é fixo!Quando utilizamos o hostname, isso não é necessário. Podemos nos conectar pelo hostname!Vagrant.configure(\"2\") do |config|     config.vm.box = \"peru/windows-server-2019-standard-x64-eval\" # Box utilizada  config.vm.hostname = \"VMEXARTICLE\"endAssim ficou o nosso VagrantFile após os aprendizados deste capítulo:Vagrant.configure(\"2\") do |config|  config.vm.box = \"peru/windows-server-2019-standard-x64-eval\"  config.vm.network \"forwarded_port\", guest: 1433, host: 1433   config.vm.network \"private_network\", type: \"dhcp\"  config.vm.provider \"virtualbox\" do |vb|      vb.memory = \"1024\"      vb.cpus = 10      vb.name = \"Article Test 01\" # Nome da VM no Hypervisor  end  config.vm.hostname = \"VMEXARTICLE\"endVocê pode reiniciar a VM para aplicar as alterações. Para testar o hostname, faça um PING VMEXARTICLE.Scripts Shell para Automatizar TarefasIsso sem sombra de dúvidas é o que mais amo no Vagrant, você pode rodar Scripts Shell (Ou Bash Scripts se for Linux), de forma totalmente automatizada.Nesse exemplo eu vou liberar o Firewall da máquina, você pode fazer de duas maneiras.Especificando o comando direto no VagrantFile config.vm.provision \"shell\", inline: &lt;&lt;-SHELL    netsh advfirewall set allprofiles state off  SHELLEspecificando um path para o comando (Ele precisa estar no mesmo diretório do VagrantFile)config.vm.provision \"shell\", path: \"disable_firewall.ps1\"Quero que você dê uma pausa aqui e pense… quantas coisas é possível fazer com essa automatização?Caso a sua máquina tenha subido, não é necessário reiniciar para que os scripts Shell rodem. Você pode realizar o seguinte comando:vagrant provisionEle vai identificar qual parte no VagrantFile possue o “config.vm.provision” e rodar todos. Segue exemplo:  VagrantFile final:Vagrant.configure(\"2\") do |config|  config.vm.box = \"peru/windows-server-2019-standard-x64-eval\"  config.vm.network \"forwarded_port\", guest: 1433, host: 14330  config.vm.network \"private_network\", type: \"dhcp\"  config.vm.provider \"virtualbox\" do |vb|      vb.memory = \"1024\"      vb.cpus = 10      vb.name = \"Article Test 01\"   end  config.vm.hostname = \"VMEXARTICLE\"  config.vm.provision \"shell\", inline: &lt;&lt;-SHELL    netsh advfirewall set allprofiles state off  SHELLendSimples, não? ;)Criando uma BOXImagine esse cenário agora: Você instalou tudo que era necessário para o ambiente do projeto e deseja escalar o mesmo para o servidor de produção.O que podemos fazer? Nós podemos fechar a NOSSA Box - vamos empacotar a Box em um arquivo .boxExemplo:Criando o arquivo .box da nossa VMvagrant package --output article_test.box  vagrant package: é o comando, você pode adicionar o -h para ver as outras opções do mesmo  --output: Complemento do comando para exportar a Box  article_test.box: Nome dado para a nossa Box  Após criar o arquivo .box, você precisa adicionar ela em sua lista de Boxes. Igual fizemos no primeiro exemplo, quando puxamos a nossa VM do Vagrant Cloud. Porém, agora vamos buscar localmente!Adicionando a nossa Box na lista de Boxesvagrant box add --name article-test article_test.box  vagrant box add: Comando para criar a Box  -- name article-test: Nome que você vai dar para a Box  article_test.box: Nome que foi dado para o arquivo .BoxPronto! Você tem uma infra como código agora…Se te interessou, pesquise mais sobre o assunto, o Vagrant tem muito mais a oferecer. Garanto que não vai se arrepender!"
  },
  
  {
    "title": "Como Criar um Blog Como Esse",
    "url": "/posts/first-post/",
    "categories": "Blog",
    "tags": "blog",
    "date": "2024-01-01 00:00:00 -0300",
    





    
    "snippet": "Hello WorldFala, galera!Lorenzo está de cara nova agora, faz tempo que estava querendo criar um Blog e fiquei impressionado com a facilidade de criação utilizando essa ferramenta.Como o intuito des...",
    "content": "Hello WorldFala, galera!Lorenzo está de cara nova agora, faz tempo que estava querendo criar um Blog e fiquei impressionado com a facilidade de criação utilizando essa ferramenta.Como o intuito desse Blog é espalhar conhecimento, vou começar esse post ensinando e documentando como você também pode criar um Blog como este.O Que é o Jekyll?Jekyll é um gerador de sites estáticos escrito em Ruby. Ele permite criar sites e blogs que são transformados em arquivos HTML estáticos. A principal vantagem do Jekyll é que ele permite desenvolver sites de forma simples, sem a necessidade de um banco de dados ou backend dinâmico.Alguns benefícios do Jekyll incluem:  Simplicidade: Ideal para sites simples como blogs, portfólios e documentações.  Hospedagem no GitHub Pages: Jekyll é integrado ao GitHub Pages, permitindo que desenvolvedores hospedem seus sites diretamente no GitHub.  Markdown e Layouts: Suporte a escrita em Markdown e a utilização de layouts para fácil formatação de conteúdo.Porque usar o Jenkyll como motor de blog?  Para responder essa, vou deixar um link explicando alguns motivos: https://aleatorio.dev.br/posts/porque-usar-jenkyl/Esse blog post do link foi feito usando Jenkyll tambémInstalação e SetupSeu primeiro passo aqui é clonar e usar o template disponibilizado no GitHub, primeiro clone no repositório remoto e depois para o repositório local: Link Template GitHubClique em:  Use This Template  Create a New Repository  O nome do repositório precisa ser assim: USERNAME.github.io (O meu é lorenzouriel.github.io)  Clone o seu repositório em uma pasta localPara iniciar, você precisa instalar o Ruby e o Jekyll na sua máquina, existe um tutorial para isso: TutorialDepois que tiver instalado, você pode rodar os seguintes comandos:  bundle - Instalar as últimas dependências  bundle exec jekyll s - Realizar o Build e rodar localmenteDepois que você adicionar o seu post, pode fazer o push para o repositório remoto, por conta do arquivo pages-deploy.yml o deploy é realizado automaticamente no seu GitHub pages, você pode acessar ele atráves do nome do repositório que você criou: USERNAME.github.ioCriando o Primeiro PostAchei legal adicionar esse tópico porque existe uma estrutura padrão para a criação de um Blog no Jenkyll.Você deve criar o arquivo Markdown na pasta: _posts. Existe um padrão para a criação do arquivo, precisa ser:yyyy-mm-dd-titulo-post.md.Após a criação do arquivo, você deve iniciar o Markdown com algumas variáveis.---title: \"Como Criar um Blog Como Esse\"date: 2024-01-01 00:00:00:0000categories: [Blog]tags: [blog]---# Hello WorldFala, galera! Quando fechar com os ---, você pode iniciar o seu post em Markdown.Depois é só fazer o deploy e acessar.Referências  Tutorial  Instalação  Dicas de Customização  Mais Sobre o Jenkyll"
  }
  
]

