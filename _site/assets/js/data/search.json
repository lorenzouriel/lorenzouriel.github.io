[
  
  {
    "title": "Monitoria e Observabilidade com Prometheus e Grafana",
    "url": "/posts/observability-prometheus-grafana/",
    "categories": "Observability",
    "tags": "observability, IaC",
    "date": "2024-05-22 00:00:00 -0300",
    





    
    "snippet": "PrometheusÉ uma ferramenta de monitoria, muito utilizado em ambientes dinâmicos, como containers (k8s, swarms, e etc…)Pode ser utilizado em outros ambientes bare metal, mas o forte dele é em infrae...",
    "content": "PrometheusÉ uma ferramenta de monitoria, muito utilizado em ambientes dinâmicos, como containers (k8s, swarms, e etc…)Pode ser utilizado em outros ambientes bare metal, mas o forte dele é em infraestrutura de microserviços e containers.Você utilizar ele de diversas maneiras:  Como um http server que salva e expõe as métricas, assim você pode consultar usando outro sistema de observabilidade.  Como um sistema de observabilidade completo, criando dashboards e gerando alertas em cima dessas métricasArquitetura PrometheusUm outro ponto importante é que o Prometheus faz o pull das métricas, diferente de outras aplicações de monitoria, realizando esse pull, deixa o processo mais leve e menos danoso para o servidor/ambiente monitorado.  Alguns aspectos importantes são:  Targets: Qualquer ambiente que podemos recolher as métricas, como: linux server, http server, databases, containers, microserviços e qualquer ambiente.  Units: Qualquer medida que podemos analisar do ambiente: CPU, memória, latência, espaço em disco, etc…  Metrics: Todas as units que foram recolhidas e armazenadas no Prometheus.O Retrieval é o agente que envia essas métricas, ele recolhe essas informações atráves de uma URL de conexão com seu ambiente. Para isso vamos precisar de um library que expõe a sua aplicação com o recurso /metrics  Alguns serviços já possuem esse /metrics expostos.Arquitetura Prometheus Simplificada    Fonte: https://michelleamesquita.medium.com/monitoramento-com-grafana-prometheus-fc2227e67433O nosso Prometheus utiliza o retrieval para realizar o pull das métricas de nossos ambientes e adiciona essas métricas em um Storage (Time Series Database). Com o Grafana nós conseguimos consultar essas métricas e criar dashboards personalizados de monitoria e observabilidade.Podemos também usar a própria UI do Prometheus ou consultar via API.GrafanaÉ uma ferramenta Open Source para visualização de dados, ela é muito popular para visualização de monitoria e observabilidade.Você pode criar alertas, queries e diversas visualizações consultando as /metrics.Existem vários dashboards já pré-configurados que foram disponibilizados pela comunidade, vamos utilizar um deles:      Nós vamos utilizar os dashboard do repositório Grafana Dashboards, segue link do GitHub: acesse aqui        Podemos importar um dashboard para o grafana usando usando o tema.json do repositório acima: acesse aqui  Subindo um Serviço de Observabilidade e Monitoria com Prometheus e GrafanaEu adicionei todos os arquivos que utilizei em um repositório no meu GitHub. Você pode clonar e iniciar com os comandos abaixo.Resumo dos Arquivos:  Vagrantfile: Configuração para criar e provisionar a VM com Vagrant.  provision.sh: Script de provisionamento para instalar e configurar Docker na VM.  prometheus.yml: Arquivo de configuração do Prometheus para definir as fontes de scrape.  node_exporter-1.3.0.linux-amd64.tar.gz: Binário do Node Exporter para monitorar a máquina.Subindo a VMPara iniciar a VM, use o comando:vagrant upAcessando a VMSincronize e adicione os arquivos na pasta do servidor:vagrant rsyncConfiguração do Node Exporter  Node Exporter:          Extraia os arquivos do tar:        tar -xvf node_exporter-1.3.0.linux-amd64.tar.gz                      Mova os arquivos para o diretório /opt/:    tar -xvf node_exporter-1.3.0.linux-amd64.tar.gz        Navegue para a pasta do node_exporter:    cd /opt/node_exporter-1.3.0.linux-amd64        Execute o node exporter em background (para não travar o cmd):    nohup ./node_exporter &amp;        Verifique os logs do nohup:    tail -f nohup.out`      Testando a Conexão do Node Exporter (Opcional)Para instalar telnet, se necessário, e testar a conexão do node exporter:yum install telnet -ytelnet 192.168.1.6 9100Configuração do PrometheusSuba o Prometheus via Docker:docker run -d -p 9090:9090 -v /vagrant/prometheus.yml:/etc/prometheus/prometheus.yml prom/prometheusAcessando as Interfaces  Acesse a UI do Prometheus em: http://192.168.1.6:9090  Acesse o node exporter em: http://192.168.1.6:9100/metricsConfiguração do Grafana  Suba a imagem do Grafana:    docker run -d -p 3000:3000 --name grafana grafana/grafana:latest        Verifique se o Docker e o Prometheus estão no ar:    docker ps        Acesse a interface do Grafana:          URL: http://192.168.1.3:3000      Login padrão: admin      Senha padrão: admin        Configure a fonte de dados no Grafana:          Vá em Data Sources -&gt; Add data source -&gt; Prometheus      Em Connection -&gt; URL, adicione: http://192.168.1.6:9090      Clique em Save &amp; Test        Importando um Dashboard pré-configurado para o Node Exporter:          Acesse os dashboard nesse [repositório] e o .json que utilizei [aqui].      Copie o conteúdo do arquivo .json do dashboard.      No Grafana, vá em Dashboards -&gt;  Create Dashboard -&gt; Import.      Cole o conteúdo do .json no campo Import.      Selecione a fonte de dados Prometheus configurada anteriormente.      Clique em Import.        Seu Dashboard estará disponível e configurado.                "
  },
  
  {
    "title": "Como Criar um Blog Como Esse",
    "url": "/posts/first-post/",
    "categories": "Blog",
    "tags": "blog",
    "date": "2024-01-01 00:00:00 -0300",
    





    
    "snippet": "Hello WorldFala, galera!Lorenzo está de cara nova agora, faz tempo que estava querendo criar um Blog e fiquei impressionado com a facilidade de criação utilizando essa ferramenta.Como o intuito des...",
    "content": "Hello WorldFala, galera!Lorenzo está de cara nova agora, faz tempo que estava querendo criar um Blog e fiquei impressionado com a facilidade de criação utilizando essa ferramenta.Como o intuito desse Blog é espalhar conhecimento, vou começar esse post ensinando e documentando como você também pode criar um Blog como este.O Que é o Jekyll?Jekyll é um gerador de sites estáticos escrito em Ruby. Ele permite criar sites e blogs que são transformados em arquivos HTML estáticos. A principal vantagem do Jekyll é que ele permite desenvolver sites de forma simples, sem a necessidade de um banco de dados ou backend dinâmico.Alguns benefícios do Jekyll incluem:  Simplicidade: Ideal para sites simples como blogs, portfólios e documentações.  Hospedagem no GitHub Pages: Jekyll é integrado ao GitHub Pages, permitindo que desenvolvedores hospedem seus sites diretamente no GitHub.  Markdown e Layouts: Suporte a escrita em Markdown e a utilização de layouts para fácil formatação de conteúdo.Porque usar o Jenkyll como motor de blog?  Para responder essa, vou deixar um link explicando alguns motivos: https://aleatorio.dev.br/posts/porque-usar-jenkyl/Esse blog post do link foi feito usando Jenkyll tambémInstalação e SetupSeu primeiro passo aqui é clonar e usar o template disponibilizado no GitHub, primeiro clone no repositório remoto e depois para o repositório local: Link Template GitHubClique em:  Use This Template  Create a New Repository  O nome do repositório precisa ser assim: USERNAME.github.io (O meu é lorenzouriel.github.io)  Clone o seu repositório em uma pasta localPara iniciar, você precisa instalar o Ruby e o Jekyll na sua máquina, existe um tutorial para isso: TutorialDepois que tiver instalado, você pode rodar os seguintes comandos:  bundle - Instalar as últimas dependências  bundle exec jekyll s - Realizar o Build e rodar localmenteDepois que você adicionar o seu post, pode fazer o push para o repositório remoto, por conta do arquivo pages-deploy.yml o deploy é realizado automaticamente no seu GitHub pages, você pode acessar ele atráves do nome do repositório que você criou: USERNAME.github.ioCriando o Primeiro PostAchei legal adicionar esse tópico porque existe uma estrutura padrão para a criação de um Blog no Jenkyll.Você deve criar o arquivo Markdown na pasta: _posts. Existe um padrão para a criação do arquivo, precisa ser:yyyy-mm-dd-titulo-post.md.Após a criação do arquivo, você deve iniciar o Markdown com algumas variáveis.---title: \"Como Criar um Blog Como Esse\"date: 2024-01-01 00:00:00:0000categories: [Blog]tags: [blog]---# Hello WorldFala, galera! Quando fechar com os ---, você pode iniciar o seu post em Markdown.Depois é só fazer o deploy e acessar.Referências  Tutorial  Instalação  Dicas de Customização  Mais Sobre o Jenkyll"
  }
  
]

